package com.wisdom.nhoa.util.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wisdom.nhoa.homepage.model.MsgListModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG_LIST_MODEL".
*/
public class MsgListModelDao extends AbstractDao<MsgListModel, Long> {

    public static final String TABLENAME = "MSG_LIST_MODEL";

    /**
     * Properties of entity MsgListModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Msgtitle = new Property(1, String.class, "msgtitle", false, "MSGTITLE");
        public final static Property Msgdiscription = new Property(2, String.class, "msgdiscription", false, "MSGDESCRIPTION");
        public final static Property MessTypeCode = new Property(3, String.class, "messTypeCode", false, "MESSTYPECODE");
        public final static Property DataId = new Property(4, String.class, "dataId", false, "DATAID");
        public final static Property Isread = new Property(5, int.class, "isread", false, "ISREAD");
    }


    public MsgListModelDao(DaoConfig config) {
        super(config);
    }
    
    public MsgListModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG_LIST_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MSGTITLE\" TEXT," + // 1: msgtitle
                "\"MSGDESCRIPTION\" TEXT," + // 2: msgdiscription
                "\"MESSTYPECODE\" TEXT," + // 3: messTypeCode
                "\"DATAID\" TEXT," + // 4: dataId
                "\"ISREAD\" INTEGER NOT NULL );"); // 5: isread
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG_LIST_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MsgListModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msgtitle = entity.getMsgtitle();
        if (msgtitle != null) {
            stmt.bindString(2, msgtitle);
        }
 
        String msgdiscription = entity.getMsgdiscription();
        if (msgdiscription != null) {
            stmt.bindString(3, msgdiscription);
        }
 
        String messTypeCode = entity.getMessTypeCode();
        if (messTypeCode != null) {
            stmt.bindString(4, messTypeCode);
        }
 
        String dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindString(5, dataId);
        }
        stmt.bindLong(6, entity.getIsread());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MsgListModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msgtitle = entity.getMsgtitle();
        if (msgtitle != null) {
            stmt.bindString(2, msgtitle);
        }
 
        String msgdiscription = entity.getMsgdiscription();
        if (msgdiscription != null) {
            stmt.bindString(3, msgdiscription);
        }
 
        String messTypeCode = entity.getMessTypeCode();
        if (messTypeCode != null) {
            stmt.bindString(4, messTypeCode);
        }
 
        String dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindString(5, dataId);
        }
        stmt.bindLong(6, entity.getIsread());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MsgListModel readEntity(Cursor cursor, int offset) {
        MsgListModel entity = new MsgListModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msgtitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // msgdiscription
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // messTypeCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dataId
            cursor.getInt(offset + 5) // isread
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MsgListModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgtitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsgdiscription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessTypeCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDataId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsread(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MsgListModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MsgListModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MsgListModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
